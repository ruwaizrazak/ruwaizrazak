---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import IndexLayout from '../../layouts/IndexLayout.astro';
import { XMLParser } from 'fast-xml-parser';

// Fetch Mastodon RSS feed
const response = await fetch('https://mastodon.social/@ruwaizrazak.rss');
const xmlData = await response.text();
const parser = new XMLParser({
  ignoreAttributes: false,
  attributeNamePrefix: "@_"
});
const feed = parser.parse(xmlData);

// Transform Mastodon RSS items into post format
const mastodonPosts = feed.rss.channel.item.map(item => ({
  collection: 'mastodon',
  id: item.guid,
  data: {
    title: new Date(item.pubDate).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    }),
    profileImage: feed.rss.channel.image.url,
    description: item.description.replace(/<[^>]*>/g, ''),
    pubDate: new Date(item.pubDate),
    url: item.link,
    media: item['media:content'] ? {
      url: item['media:content']['@_url'],
      type: item['media:content']['@_type']
    } : null,
    tags: item.category ? (Array.isArray(item.category) ? item.category : [item.category]) : []
  }
}));

// Fetch all collections
const [notes, essays, works, books] = await Promise.all([
  getCollection('notes', ({ data }) => data.publish === true),
  getCollection('essays', ({ data }) => data.publish === true),
  getCollection('works', ({ data }) => data.publish === true),
  getCollection('books', ({ data }) => data.publish === true)
]);

// Combine and sort all posts including Mastodon posts
const allPosts = [
  ...notes.map(post => ({ ...post, collection: 'notes' })),
  ...essays.map(post => ({ ...post, collection: 'essays' })),
  ...works.map(post => ({ ...post, collection: 'works' })),
  ...books.map(post => ({ ...post, collection: 'books' })),
  ...mastodonPosts
].sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get unique tags from all posts
const allTags = ['all', ...new Set(allPosts.flatMap(post => post.data.tags || []))].sort();
const collections = ['all', 'notes', 'essays', 'works', 'books', 'mastodon'];
---

<IndexLayout
  title="Garden"
  description="In a nutshell, a wiki can be comprised of Essays, Books and imperfect Notes along with whatever resources I find interesting and felt might be useful at a later stage."
  posts={allPosts}
  tags={allTags}
  collections={collections}
  showCollections={true}
/>

<style>
	.masonry-grid {
		column-gap: 1rem;
	}
	.break-inside-avoid {
		break-inside: avoid;
	}
</style>
