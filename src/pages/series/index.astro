---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import Main from '../../components/Main.astro';
import H1 from '../../components/mdxComponents/H1.astro';
import H2 from '../../components/mdxComponents/H2.astro';
import P from '../../components/mdxComponents/P.astro';
import NoteMain from '../../components/NoteMain.astro';
import GradientHeading from '../../components/mdxComponents/gradientHeading.astro';
import Link from '../../components/mdxComponents/Link.astro';
import { render } from 'astro:content';

// Get all published series, sorted by order or lastUpdated
const allSeries = await getCollection('series', ({ data }) => data.publish);
const sortedSeries = allSeries.sort((a, b) => {
  // Sort by manual order first, then by lastUpdated
  if (a.data.order && b.data.order) {
    return a.data.order - b.data.order;
  }
  return new Date(b.data.lastUpdated).getTime() - new Date(a.data.lastUpdated).getTime();
});

// Get post counts for each series
const allSeriesPosts = await getCollection('seriesPosts');
const seriesPostCounts: Record<string, number> = {};
allSeriesPosts.forEach(post => {
  const slug = post.data.seriesSlug;
  seriesPostCounts[slug] = (seriesPostCounts[slug] || 0) + 1;
});

// Group posts by series
const seriesWithPosts = sortedSeries.map(series => {
  const posts = allSeriesPosts
    .filter(post => post.data.seriesSlug === series.id)
    .sort((a, b) => a.data.seriesOrder - b.data.seriesOrder);
  
  return {
    ...series,
    posts
  };
});
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main class="w-full sm:w-[90%] mx-auto">
			<div class="mt-20">
				<div class="flex flex-col gap-4">
					<a href="/" class="inline-block z-1">
						<div class="flex items-center gap-2 group not-prose">
							<img src="/icons/backArrow.svg" class="w-8 h-auto group-hover:rotate-20 transition-all" alt="Back" />
							<span class="uppercase font-sans font-medium text-lg">Back to Index</span>
						</div>
					</a>
				</div>
				
				<GradientHeading size="xl">Series</GradientHeading>
				<p class="text-lg sm:text-xl mt-4">Explore content organized by series and themes</p>
				
				<hr class="w-full my-8 border-stone-100">
				
				{/* Display series with their posts */}
				{seriesWithPosts.map((series) => (
					<div class="mb-12 border border-stone-200 rounded-lg p-6">
						<div class="flex items-center gap-4 mb-6">
							{series.data.order && (
								<span class="text-3xl font-bold text-blue-600">#{series.data.order}</span>
							)}
							<div>
								<GradientHeading size="lg">{series.data.title}</GradientHeading>
								<p class="text-stone-600 mt-2">{series.data.description}</p>
							</div>
						</div>
						
						{/* Series metadata */}
						<div class="flex items-center gap-4 mb-6 text-sm text-stone-500">
							<span>Started: {series.data.startedDate.toLocaleDateString()}</span>
							<span>•</span>
							<span>Last updated: {series.data.lastUpdated.toLocaleDateString()}</span>
							<span>•</span>
							<span>{series.posts.length} posts</span>
						</div>
						
						{/* Series posts */}
						{series.posts.length > 0 ? (
							<div class="space-y-4">
								<h3 class="text-lg font-semibold text-stone-700 mb-4">Posts in this series:</h3>
								<div class="space-y-3">
									{series.posts.map((post, index) => (
										<div class="border-l-4 border-stone-200 pl-4 py-2">
											<div class="flex items-center gap-3 mb-2">
												<span class="text-sm font-medium text-stone-500">Part {post.data.seriesOrder}</span>
												<span class="text-xs text-stone-400">•</span>
												<span class="text-sm text-stone-500">{post.data.pubDate.toLocaleDateString()}</span>
											</div>
											<h4 class="text-lg font-semibold mb-2">
												<a href={`/series-posts/${post.id}`} class="hover:text-blue-600 transition-colors">
													{post.data.title}
												</a>
											</h4>
											<p class="text-stone-600 text-sm">{post.data.description}</p>
											{post.data.excerpt && (
												<p class="text-stone-500 text-sm mt-2 italic">{post.data.excerpt}</p>
											)}
											<div class="flex items-center gap-2 mt-3">
												{post.data.tags.map((tag: string) => (
													<span class="px-2 py-1 bg-stone-100 text-stone-600 text-xs rounded-full">
														{tag}
													</span>
												))}
											</div>
										</div>
									))}
								</div>
							</div>
						) : (
							<div class="text-center py-8 text-stone-500">
								<p>No posts in this series yet.</p>
							</div>
						)}
					</div>
				))}
				
				{/* Show message if no series content */}
				{seriesWithPosts.length === 0 && (
					<div class="text-center py-12">
						<p class="text-stone-500 text-lg">No series content available yet.</p>
						<p class="text-stone-400 mt-2">Check back soon for organized content series!</p>
					</div>
				)}
			</div>
		</main>
		<Footer />
	</body>
</html>
 