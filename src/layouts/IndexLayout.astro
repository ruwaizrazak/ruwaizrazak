---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import NoteCard from '../components/NoteCard.astro';
import BookCard from '../components/BookCard.astro';
import WorkCard from '../components/WorkCard.astro';
import EssayCard from '../components/EssayCard.astro';
import GradientHeading from '../components/mdxComponents/gradientHeading.astro';
import Tag from '../components/Tag.astro';
import { ClientRouter } from "astro:transitions";
import MastodonPostCard from '../components/MastodonPostCard.astro';
import PixelfedCard from '../components/PixelfedCard.astro';


interface Props {
  title: string;
  description: string;
  posts: any[];
  tags?: string[];
  collections?: string[];
  showCollections?: boolean;
  showTags?: boolean; // Add this prop
}

const {
  title,
  description,
  posts,
  tags = ['all'],
  collections = ['all'],
  showCollections = false,
  showTags = true // Default to true
} = Astro.props;

const currentTag = 'all';


// Sort tags with 'all' first, then alphabetically
const sortedTags = [...tags.filter(tag => tag !== 'all').sort()];
---

<!doctype html>
<html lang="en" transition:name="root" transition:animate="none">
  <head>
    <BaseHead title={title} description={description} />
    <ClientRouter />
  </head>
  <body>
    <Header />
    <main class="w-[90%] mx-auto transition:animate="slide"">
      <div class="mt-8">

        <div class="flex flex-col mt-20">
          <a href={Astro.url.pathname.includes('/garden') ? '/' : '/garden'} class="inline-block z-1">
          <div class="flex items-center gap-2 group">
            <img src="/icons/backArrow.svg" class="w-8 h-auto group-hover:rotate-20 transition-all" alt="Back" />
            <span class="uppercase font-sans font-medium">Back to {Astro.url.pathname.includes('/garden') ? 'Index' : 'Garden'}</span>
          </div>
        </a>
          <GradientHeading size="xl">{title}</GradientHeading>
          <p class="w-full md:w-[80%] text-center sm:text-left text-lg sm:text-xl mt-4">{description}</p>
        </div>
      </div>
      <div class="mt-10">
        <div class="flex flex-wrap justify-between content-start gap-4 mb-4 items-center">
          {showTags && (
            <div class="flex flex-wrap justify-start gap-4 mb-8">
              {sortedTags.map((tag, index) => (
                <Tag
                  tag={tag}
                  isActive={tag === currentTag}
                  index={index}
                />
              ))}
            </div>
          )}

<style>
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .animate-slide-in {
    animation: slideIn 0.5s ease-out forwards;
    opacity: 0;
  }
</style>

          {showCollections && collections.length > 1 && (
            <div class="relative inline-block self-start">
              <select class="collection-filter px-4 py-2 text-sm border border-gray-200 hover:bg-yellow-50 text-gray-500 cursor-pointer bg-transparent appearance-none pr-10">
                {collections.map(collection => (
                  <option value={collection}>
                    {collection.charAt(0).toUpperCase() + collection.slice(1)}
                  </option>
                ))}
              </select>
              <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                </svg>
              </div>
            </div>
          )}
        </div>

        <div class="masonry-grid columns-1 md:columns-2 lg:columns-3 xl:columns-4 gap-5 md:gap-7 lg:gap-10">
          {posts?.map((post) => (
            <div class="break-inside-avoid mb-4 post-item transition-all duration-700" data-tags={post.data.tags?.join(' ')} data-collection={post.collection}>
              {post.collection === 'books' ? (
                <BookCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={`/books/${post.id}/`}
                  heroImage={post.data.heroImage || '/placeholder-book.jpg'}
                  author={post.data.author || 'Unknown Author'}
                  readStatus={post.data.readStatus || 'to-read'}
                  maturity={post.data.maturity}
                />
              ) : post.collection === 'essays' ? (
                <EssayCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={`/essays/${post.id}/`}
                  heroImage={post.data.heroImage}
                  maturity={post.data.maturity}
                />
              ) : post.collection === 'works' ? (
                <WorkCard
                  title={post.data.title}
                  period={post.data.period || ''}
                  url={`/works/${post.id}/`}
                  heroImage={post.data.heroImage}
                />
              ) : post.collection === 'mastodon' ? (
                <MastodonPostCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={`${post.data.url}/`}
                  tags={post.data.tags}
                  profileImage={post.data.profileImage}
                  media={post.data.media}
                />
              ) : post.collection === 'pixelfed' ? (
                <PixelfedCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={post.data.url}
                  tags={post.data.tags}
                  profileImage={post.data.profileImage}
                  media={post.data.media}
                />
              ) : (
                <NoteCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={`/${post.collection}/${post.id}/`}
                  maturity={post.data.maturity}
                />
              )}
            </div>
          ))}
        </div>

        <script>
          function initializeFilters() {
            const collectionFilter = document.querySelector('.collection-filter');
            const posts = document.querySelectorAll('.post-item');
            let currentCollection = 'all';

            // Make all posts visible initially
            posts.forEach(post => post.style.display = 'block');

            // Initialize collection filter only
            if (collectionFilter) {
              collectionFilter.addEventListener('change', (e) => {
                currentCollection = e.target.value;
                filterPosts();
              });
            }

            function filterPosts() {
              posts.forEach(post => {
                const postCollection = post.dataset.collection;
                const matchesCollection = currentCollection === 'all' || postCollection === currentCollection;
                post.style.display = matchesCollection ? 'block' : 'none';
              });
            }
          }

          // Initialize on load and navigation
          document.addEventListener('DOMContentLoaded', initializeFilters);
          window.addEventListener('pageshow', initializeFilters);
        </script>
      </div>
    </main>
    <Footer />
  </body>
</html>

<style>
  .masonry-grid {
    column-gap: 1rem;
  }
  .break-inside-avoid {
    break-inside: avoid;
  }
  a:hover{
    text-decoration: line-through;
    text-decoration-style: wavy;
  }
  .active{
    text-decoration-thickness: .05em;
    text-decoration: line-through;
    text-decoration-style: wavy;

  }
</style>