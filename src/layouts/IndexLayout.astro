---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Main from '../components/Main.astro';
import H1 from '../components/mdxComponents/H1.astro';
import P from '../components/mdxComponents/P.astro';
import Link from '../components/mdxComponents/Link.astro';
import NoteCard from '../components/NoteCard.astro';
import BookCard from '../components/BookCard.astro';
import EssayCard from '../components/EssayCard.astro';
import WorkCard from '../components/workCard.astro';

interface Props {
  title: string;
  description: string;
  posts: any[];
  tags?: string[];
  collections?: string[];
  showCollections?: boolean;
  showTags?: boolean; // Add this prop
}

const {
  title,
  description,
  posts,
  tags = ['all'],
  collections = ['all'],
  showCollections = false,
  showTags = true // Default to true
} = Astro.props;

const currentTag = 'all';

// Sort tags with 'all' first, then alphabetically
const sortedTags = ['all', ...tags.filter(tag => tag !== 'all').sort()];
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>
  <body>
    <Header />
    <Main>
      <div class="prose lg:max-w max-w-none lg:mt-20 mt-10 md:mt-15">
    <Link
    href={Astro.url.pathname.includes('/garden') ? '/' : '/garden'}>
    ‚Üê Back to {Astro.url.pathname.includes('/garden') ? 'Index' : 'Garden'}
    </Link>
        <H1 className="mt-5">{title}</H1>
        <P className='leading-8 w-full lg:w-3/4'>{description}</P>
      </div>
      <div>
        <div class="flex flex-wrap justify-between content-start gap-4 mb-4 items-center">
          {showTags && (
            <div class="flex flex-wrap justify-start gap-4 mb-8">
              {sortedTags.map((tag, index) => (
                <a
                  class={`filter-btn px-4 py-2 text-sm border border-gray-200 hover:bg-yellow-50 animate-slide-in ${
                    tag === currentTag ? 'bg-yellow-300 text-black active' : 'text-gray-500'
                  }`}
                  data-tag={tag}
                  style={`animation-delay: ${index * 100}ms`}
                >
                  {tag.charAt(0).toUpperCase() + tag.slice(1)}
                </a>
              ))}
            </div>
          )}

<style>
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .animate-slide-in {
    animation: slideIn 0.5s ease-out forwards;
    opacity: 0;
  }
</style>

          {showCollections && collections.length > 1 && (
            <div class="relative inline-block self-start">
              <select class="collection-filter px-4 py-2 text-sm border border-gray-200 hover:bg-yellow-50 text-gray-500 cursor-pointer bg-transparent appearance-none pr-10">
                {collections.map(collection => (
                  <option value={collection}>
                    {collection.charAt(0).toUpperCase() + collection.slice(1)}
                  </option>
                ))}
              </select>
              <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                </svg>
              </div>
            </div>
          )}
        </div>

        <div class="masonry-grid columns-1 md:columns-2 lg:columns-3 xl:columns-4 gap-5 md:gap-7 lg:gap-10">
          {posts.map((post) => (
            <div class="break-inside-avoid mb-4 post-item opacity-0 translate-y-4 transition-all duration-700" data-tags={post.data.tags?.join(' ')} data-collection={post.collection}>
              {post.collection === 'books' ? (
                <BookCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  date={post.data.pubDate}
                  url={`/books/${post.id}/`}
                  heroImage={post.data.heroImage || '/placeholder-book.jpg'}
                  author={post.data.author || 'Unknown Author'}
                  readStatus={post.data.readStatus || 'to-read'}
                  maturity={post.data.maturity}
                />
              ) : post.collection === 'essays' ? (
                <EssayCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  date={post.data.pubDate}
                  url={`/essays/${post.id}/`}
                  heroImage={post.data.heroImage}
                  maturity={post.data.maturity}
                />
              ) : post.collection === 'works' ? (
                <WorkCard
                  title={post.data.title}
                  company={post.data.company}
                  url={`/works/${post.id}/`}
                  heroImage={post.data.heroImage || '/placeholder-work.jpg'}
                  role={post.data.role}
                  maturity={post.data.maturity}
                />
              ) : (
                <NoteCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  date={post.data.pubDate}
                  url={`/${post.collection}/${post.id}/`}
                  maturity={post.data.maturity}
                />
              )}
            </div>
          ))}
        </div>

        <script>
          const collectionFilter = document.querySelector('.collection-filter');
          const filterButtons = document.querySelectorAll('.filter-btn');
          const posts = document.querySelectorAll('.post-item');
          let currentTag = 'all';
          let currentCollection = 'all';

          // Initialize collection filter
          if (collectionFilter) {
            collectionFilter.addEventListener('change', (e) => {
              const target = e.target as HTMLSelectElement;
              currentCollection = target.value;
              filterPosts();
            });
          }

          filterButtons.forEach(button => {
            button.addEventListener('click', () => {
              currentTag = button.dataset.tag || 'all';
              filterButtons.forEach(btn => {
                btn.classList.remove('bg-yellow-300', 'text-black','active');
                btn.classList.add('text-gray-500');
              });
              // the code above removes the classes
              button.classList.remove('text-gray-500');
              button.classList.add('bg-yellow-300', 'text-black','active');
              // the code above adds the classes to the specific button
              filterPosts();
            });
          });

          // Intersection Observer for fade-in animation
          const observerOptions = {
            threshold: 0.1,
            rootMargin: '50px'
          };

          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.remove('opacity-0', 'translate-y-4');
                observer.unobserve(entry.target);
              }
            });
          }, observerOptions);

          // Observe all post items
          document.querySelectorAll('.post-item').forEach(item => {
            observer.observe(item);
          });

          // Re-observe items when filtering
          function filterPosts() {
            posts.forEach(post => {
              const postTags = post.dataset.tags?.split(' ') || [];
              const postCollection = post.dataset.collection;

              const matchesTag = currentTag === 'all' || postTags.includes(currentTag);
              const matchesCollection = currentCollection === 'all' || postCollection === currentCollection;

              if (matchesTag && matchesCollection) {
                post.style.display = 'block';
                post.classList.add('opacity-0', 'translate-y-4');
                observer.observe(post);
              } else {
                post.style.display = 'none';
              }
            });
          }
        </script>
      </div>
    </Main>
    <Footer />
  </body>
</html>

<style>
  .masonry-grid {
    column-gap: 1rem;
  }
  .break-inside-avoid {
    break-inside: avoid;
  }
  a:hover{
    text-decoration: line-through;
    text-decoration-style: wavy;
  }
  .active{
    text-decoration-thickness: .05em;
    text-decoration: line-through;
    text-decoration-style: wavy;

  }
</style>