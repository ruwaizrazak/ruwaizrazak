---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import NoteCard from '../components/NoteCard.astro';
import BookCard from '../components/BookCard.astro';
import WorkCard from '../components/WorkCard.astro';
import EssayCard from '../components/EssayCard.astro';
import GradientHeading from '../components/mdxComponents/gradientHeading.astro';
import Tag from '../components/Tag.astro';
import { ClientRouter } from "astro:transitions";
import MastodonPostCard from '../components/MastodonPostCard.astro';
import PixelfedCard from '../components/PixelfedCard.astro';


interface Props {
  title: string;
  description: string;
  posts: any[];
  tags?: string[];
  collections?: string[];
  showCollections?: boolean;
  icon?:string;
  showTags?: boolean; // Add this prop
}

const {
  title,
  description,
  posts,
  icon,
  tags = ['all'],
  collections = ['all'],
  showCollections = false,
  showTags = true // Default to true
} = Astro.props;

const currentTag = 'all';


// Sort tags with 'all' first, then alphabetically
const sortedTags = [...tags.filter(tag => tag !== 'all').sort()];
---

<!doctype html>
<html lang="en" transition:name="root" transition:animate="none">
  <head>
    <BaseHead title={title} description={description} />
    <ClientRouter />
  </head>
  <body class="bg-backgroundcolor">
    <Header />
    <main class="w-[90%] mx-auto pb-20">
      <div class="mt-8">

        <div class="flex flex-col mt-20">
          <a href={Astro.url.pathname.includes('/garden') ? '/' : '/garden'} class="inline-block z-1">
          <div class="flex items-center gap-2 group mb-5">
            <img src="/icons/backArrow.svg" class="w-8 h-auto group-hover:rotate-20 transition-all" alt="Back" />
            <span class="uppercase font-sans font-medium">Back to {Astro.url.pathname.includes('/garden') ? 'Index' : 'Garden'}</span>
          </div>
        </a>
        <div class="flex items-center gap-2">
          {icon && (
            <img src={icon} class="w-20 h-auto" alt={title} />
          )}
            <GradientHeading size="xl">{title}</GradientHeading>
        </div>
        
          <p class="w-full md:w-[70%] text-left  text-base md:text-lg  mt-2 font-serif italic">{description}</p>
        </div>
      </div>
      <div class="mt-10">
        <div class="flex flex-row gap-4 mb-4 justify-between items-center">
          <div class="flex flex-row">
            
            {showTags && (
              <>
                {/* Desktop/Tablet: Tag system with show more */}
                <div class="md:flex items-center h-9 hidden">
                  <h4 class="text-lg uppercase border-l-2 pl-1 pr-5 border-konpeki ">Topics</h4>
                </div>
                
                <div class="hidden md:block">
                  <div class="flex flex-wrap justify-start gap-4 mr-10 mb-5">
                    {sortedTags.slice(0, 10).map((tag, index) => (
                      <Tag
                        tag={tag}
                        isActive={tag === currentTag}
                        index={index}
                      />
                    ))}
                    {sortedTags.length > 10 && (
                      <button
                        id="showMoreTags" 
                        class="px-4 py-2 text-sm border border-gray-300 border-dashed transition-all duration-200 hover:-skew-x-6  hover:bg-gray-200"
                      >
                        +{sortedTags.length - 10} more
                      </button>
                    )}
                  </div>
                  {sortedTags.length > 10 && (
                    <div id="additionalTags" class="flex-wrap justify-start gap-4 mb-5" style="display: none;">
                      {sortedTags.slice(10).map((tag, index) => (
                        <Tag
                          tag={tag}
                          isActive={tag === currentTag}
                          index={index + 10}
                        />
                      ))}
                      <button 
                        id="showLessTags" 
                        class="px-4 py-2 text-sm border border-gray-300 border-dashed transition-all duration-200 hover:-skew-x-6 bg-gray-100 hover:bg-gray-200"
                      >
                        show less
                      </button>
                    </div>
                  )}
                </div>

                {/* Mobile: Dropdown menu */}
                <div class="md:hidden">
                  <div class="relative inline-block">
                    <select 
                      id="tagDropdown" 
                      class="px-4 py-2 text-sm border border-syoro hover:bg-yellow-50 text-syoro cursor-pointer bg-transparent appearance-none pr-10"
                    >
                      <option value="all">All Topics</option>
                      {sortedTags.map(tag => (
                        <option value={tag}>
                          {tag.charAt(0).toUpperCase() + tag.slice(1)}
                        </option>
                      ))}
                    </select>
                    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500">
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                </div>
              </>
            )}

          </div>
          

          {showCollections && collections.length > 1 && (
            <div class="relative inline-block self-start">
              <select class="collection-filter px-4 py-2 text-sm border border-syoro hover:bg-yellow-50 text-syoro cursor-pointer bg-transparent appearance-none pr-10">
                {collections.map(collection => (
                  <option value={collection}>
                    {collection === 'all' ? 'All Posts' : collection.charAt(0).toUpperCase() + collection.slice(1)}
                  </option>
                ))}
              </select>
              <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                </svg>
              </div>
            </div>
          )}
        </div>

        <div class="masonry-grid columns-1 md:columns-2 lg:columns-3 xl:columns-4 gap-5 md:gap-7 lg:gap-10">
          {posts?.map((post) => (
            <div class="break-inside-avoid mb-4 post-item transition-all duration-700" data-tags={post.data.tags?.join(' ')} data-collection={post.collection}>
              {post.collection === 'books' ? (
                <BookCard
                  title={post.data.title}
                  url={`/books/${post.id}/`}
                  heroImage={post.data.heroImage || '/placeholder-book.jpg'}
                  author={post.data.author || 'Unknown Author'}
                  readStatus={post.data.readStatus || 'to-read'}
                />
              ) : post.collection === 'essays' ? (
                <EssayCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={`/essays/${post.id}/`}
                  heroImage={post.data.heroImage}
                  maturity={post.data.maturity}
                />
              ) : post.collection === 'works' ? (
                <WorkCard
                  title={post.data.title}
                  period={post.data.period || ''}
                  url={`/works/${post.id}/`}
                  heroImage={post.data.heroImage}
                />
              ) : post.collection === 'mastodon' ? (
                <MastodonPostCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={post.data.url}
                  tags={post.data.tags}
                  profileImage={post.data.profileImage}
                  media={post.data.media}
                  engagement={post.data.engagement}
                  spoilerText={post.data.spoilerText}
                  language={post.data.language}
                  visibility={post.data.visibility}
                  isReply={post.data.isReply}
                  isReblog={post.data.isReblog}
                  hasPoll={post.data.hasPoll}
                  hasCard={post.data.hasCard}
                  customEmojis={post.data.customEmojis}
                  mentions={post.data.mentions}
                />
              ) : post.collection === 'pixelfed' ? (
                <PixelfedCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={post.data.url}
                  tags={post.data.tags}
                  profileImage={post.data.profileImage}
                  media={post.data.media}
                />
              ) : (
                <NoteCard
                  title={post.data.title}
                  description={post.data.description || 'No description available'}
                  pubDate={post.data.pubDate}
                  url={`/${post.collection}/${post.id}/`}
                  maturity={post.data.maturity}
                />
              )}
            </div>
          ))}
        </div>

        <script>
          function initializeFilters() {
            const collectionFilter = document.querySelector('.collection-filter') as HTMLSelectElement;
            const tagDropdown = document.querySelector('#tagDropdown') as HTMLSelectElement;
            const showMoreBtn = document.querySelector('#showMoreTags') as HTMLButtonElement;
            const showLessBtn = document.querySelector('#showLessTags') as HTMLButtonElement;
            const additionalTags = document.querySelector('#additionalTags') as HTMLElement;
            const posts = document.querySelectorAll('.post-item') as NodeListOf<HTMLElement>;
            let currentCollection = 'all';
            let currentTag = 'all';

            // Make all posts visible initially
            posts.forEach(post => {
              post.style.display = 'block';
            });

            // Initialize tag show more/less functionality
            if (showMoreBtn && additionalTags) {
              showMoreBtn.addEventListener('click', () => {
                additionalTags.style.display = 'flex';
                showMoreBtn.style.display = 'none';
              });
            }

            if (showLessBtn && additionalTags && showMoreBtn) {
              showLessBtn.addEventListener('click', () => {
                additionalTags.style.display = 'none';
                showMoreBtn.style.display = 'inline-block';
              });
            }

            // Initialize tag dropdown for mobile
            if (tagDropdown) {
              tagDropdown.value = 'all';
              tagDropdown.addEventListener('change', (e) => {
                const target = e.target as HTMLSelectElement;
                currentTag = target.value;
                filterPosts();
              });
            }

            // Initialize collection filter
            if (collectionFilter) {
              // Set initial value
              collectionFilter.value = 'all';

              collectionFilter.addEventListener('change', (e) => {
                const target = e.target as HTMLSelectElement;
                currentCollection = target.value;
                filterPosts();
              });
            }

            // Add click handlers for desktop tag links
            const tagLinks = document.querySelectorAll('a[data-tag]') as NodeListOf<HTMLAnchorElement>;
            tagLinks.forEach(link => {
              link.addEventListener('click', (e) => {
                e.preventDefault();
                const tag = link.dataset.tag;
                
                // Update active states
                tagLinks.forEach(l => l.classList.remove('active'));
                link.classList.add('active');
                
                // Update dropdown if it exists
                if (tagDropdown && tag) {
                  tagDropdown.value = tag;
                }
                
                if (tag) {
                  currentTag = tag;
                  filterPosts();
                }
              });
            });

            function filterPosts() {
              posts.forEach(post => {
                const postCollection = post.dataset.collection;
                const postTags = post.dataset.tags ? post.dataset.tags.split(' ') : [];
                
                const matchesCollection = currentCollection === 'all' || postCollection === currentCollection;
                const matchesTag = currentTag === 'all' || postTags.includes(currentTag);

                if (matchesCollection && matchesTag) {
                  post.style.display = 'block';
                } else {
                  post.style.display = 'none';
                }
              });
            }

            // Initial filter
            filterPosts();
          }

          // Initialize on load and navigation
          document.addEventListener('DOMContentLoaded', initializeFilters);
          window.addEventListener('pageshow', initializeFilters);

          // Also initialize when Astro transitions complete
          document.addEventListener('astro:page-load', initializeFilters);
        </script>
      </div>
    </main>
    <Footer />
  </body>
</html>

<style>
  .masonry-grid {
    column-gap: 1rem;
  }
  .break-inside-avoid {
    break-inside: avoid;
  }
  a:hover{
    text-decoration: line-through;
    text-decoration-style: wavy;
  }
  .active{
    text-decoration-thickness: .05em;
    text-decoration: line-through;
    text-decoration-style: wavy;

  }
</style>