---
import FormattedDate from '../FormattedDate.astro';
import Link from './Link.astro';
import { getMaturityIcon } from '../../utils/maturityIcons';
import H1 from './H1.astro';

interface Props {
  title: string;
  description?: string;
  tags?: string[];
  pubDate?: Date;
  updatedDate?: Date;
  collection?: string;
  maturity?: 'seed' | 'plant' | 'tree';
}

const { title, description, tags = [], pubDate, updatedDate, collection, maturity } = Astro.props;
const maturityIcon = maturity ? getMaturityIcon(maturity) : null;
---

<div class="prose prose-h1:text-3xl md:prose-h1:text-5xl lg:prose-h1:text-6xl mt-20 w-[95%] lg:w-full">
  <div class="flex gap-3 items-center justify-start text-stone-500 h-8">
    {collection && (
      <Link href={`/${collection}`} class="font-medium capitalize flex items-center">{collection}</Link>
    )}
    {maturity && (
      <div class="flex items-center gap-2 group relative">
        <div class="absolute bottom-full mb-2 hidden group-hover:block bg-gray-900 text-white text-sm rounded-lg p-2 w-48">
          {maturity === 'seed' && 'Early thoughts, still growing and evolving'}
          {maturity === 'plant' && 'Developing ideas with some established roots'}
          {maturity === 'tree' && 'Well-developed, thoroughly researched thoughts'}
          <div class="absolute -bottom-1 left-0 w-2 h-2 bg-gray-900 transform rotate-45"></div>
        </div>
        <img
          src={maturityIcon}
          alt={`${maturity} maturity`}
          class="w-5 h-5 not-prose"
        />
        <span class="font-medium capitalize flex items-center cursor-help">{maturity}</span>
      </div>
    )}
  </div>
  <h1 class="mt-5 font-bold w-full mb-5">{title}</h1>
  <p class="text-gray-800 md:text-lg lg:text-xl mt-0">{description}</p>



  <div class="flex flex-col md:flex-row justify-between lg:grid-cols-2 items-start align-top gap-4 md:gap-0">
    <div class="date text-left w-full md:w-auto">
      <FormattedDate date={pubDate} />
      {updatedDate && (
        <div class="last-updated-on">
          Last updated on <FormattedDate date={updatedDate} />
        </div>
      )}
    </div>
    <div class="w-full md:w-1/2 items-start">
      {tags.length > 0 && (
        <div class="flex gap-2 justify-start md:justify-end mt-4 flex-wrap">
          {tags.map(tag => (
            <a
              href={`/tags/${tag}`}
              class="px-2 py-1 text-sm bg-stone-100 rounded-lg text-stone-600 hover:bg-yellow-100 transition-colors capitalize"
            >
              {tag}
            </a>
          ))}
        </div>
      )}
    </div>

  </div>
  <hr class="h-px my-8 bg-gray-100 border-0 dark:bg-gray-300">
</div>