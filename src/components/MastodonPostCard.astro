---
import Link from './mdxComponents/Link.astro';

interface Props {
  title: string;
  description: string;
  pubDate: Date;
  url: string;
  profileImage?: string;
  tags?: string[];
  media?: {
    url: string;
    type: string;
    description?: string;
    blurhash?: string;
  }[];
  engagement?: {
    favourites: number;
    reblogs: number;
    replies: number;
  };
  spoilerText?: string;
  language?: string;
  visibility?: string;
  isReply?: boolean;
  isReblog?: boolean;
  hasPoll?: boolean;
  hasCard?: boolean;
  customEmojis?: string[];
  mentions?: string[];
}

const {
  title,
  description,
  pubDate,
  url,
  tags,
  media,
  profileImage,
  engagement,
  spoilerText,
  language,
  visibility,
  isReply,
  isReblog,
  hasPoll,
  hasCard,
  customEmojis,
  mentions
} = Astro.props;

const displayText = spoilerText || description;
---

<a href={url} target="_blank" rel="noopener noreferrer" onclick="event.stopPropagation()">
<div class="bg-cardbg hover:bg-stone-200 border border-card-border rounded-xl p-4 hover:scale-95 transition-all duration-200">
  <div class="flex items-start gap-3">
    <div class="flex-shrink-0">
      <div class="w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center relative">
        <img src={profileImage} alt="Profile" class="w-8 h-8" />
        <img src="/icons/mastodon.png" alt="mastodonIcon" class=" absolute -bottom-10 w-9 h-auto">
      </div>
    </div>
    <div class="flex-grow min-w-0">
      <div class="flex items-center gap-2 mb-1">
        <h4 class="font-sans text-lg">Ruwaiz Razak</h4>
        <span class="text-gray-500">Â·</span>
        <time datetime={pubDate.toISOString()} class="text-gray-500 text-sm">
          {pubDate.toLocaleDateString('en-us', {
            month: 'short',
            day: 'numeric'
          })}
        </time>

        {isReply && (
          <span class="text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded-full">Reply</span>
        )}
        {isReblog && (
          <span class="text-xs bg-green-100 text-green-600 px-2 py-1 rounded-full">Reblog</span>
        )}
        {hasPoll && (
          <span class="text-xs bg-purple-100 text-purple-600 px-2 py-1 rounded-full">Poll</span>
        )}
        {visibility && visibility !== 'public' && (
          <span class="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-full">{visibility}</span>
        )}
      </div>

      {spoilerText && (
        <div class="mb-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-sm text-yellow-800">
          <strong>Content Warning:</strong> {spoilerText}
          <button class="ml-2 text-blue-600 hover:underline" onclick="this.parentElement.nextElementSibling.classList.toggle('hidden')">
            Show content
          </button>
        </div>
      )}

      <p class="text-base md:text-lg group-hover:italic transition-all duration-100 font-serif first-letter:text-konpeki first-letter:font-medium group-hover:text-indigo-600 text-syoro whitespace-pre-wrap break-words {spoilerText ? 'hidden' : ''}">"{displayText}"</p>

      {media && media.length > 0 && (
        <div class="mt-3 space-y-2">
          {media.map((item, index) => (
            <div class="rounded-xl overflow-hidden">
              {item.type === 'image' ? (
                <img
                  src={item.url}
                  alt={item.description || `Post media ${index + 1}`}
                  class="w-full h-auto"
                  style={item.blurhash ? `background-image: url(data:image/svg+xml;base64,${item.blurhash})` : ''}
                />
              ) : item.type === 'video' ? (
                <video src={item.url} controls class="w-full h-auto">
                  Your browser does not support video playback.
                </video>
              ) : item.type === 'audio' ? (
                <audio src={item.url} controls class="w-full">
                  Your browser does not support audio playback.
                </audio>
              ) : (
                <div class="p-4 bg-gray-100 text-center text-gray-600">
                  <a href={item.url} target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">
                    View {item.type} attachment
                  </a>
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {engagement && (
        <div class="flex gap-4 mt-3 text-sm text-gray-500">
          <span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
            </svg>
            {engagement.favourites}
          </span>
          <span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" />
            </svg>
            {engagement.reblogs}
          </span>
          <span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd" />
            </svg>
            {engagement.replies}
          </span>
        </div>
      )}

      {customEmojis && customEmojis.length > 0 && (
        <div class="flex flex-wrap gap-1 mt-2">
          {customEmojis.map(emoji => (
            <span class="text-sm bg-gray-100 px-2 py-1 rounded">
              :{emoji}:
            </span>
          ))}
        </div>
      )}

      {mentions && mentions.length > 0 && (
        <div class="flex flex-wrap gap-1 mt-2">
          {mentions.map(mention => (
            <span class="text-sm text-blue-600">
              @{mention}
            </span>
          ))}
        </div>
      )}

      {tags && tags.length > 0 && (
        <div class="flex flex-wrap gap-1 mt-2">
          {tags.map(tag => (
            <a
              href={`https://mastodon.social/tags/${tag}`}
              target="_blank"
              rel="noopener noreferrer"
              class="text-blue-500 text-sm hover:underline"
              onclick="event.stopPropagation()"
            >
              #{tag}
            </a>
          ))}
        </div>
      )}

      <div class="flex gap-16 mt-3 text-gray-500">
        <a href={url} target="_blank" rel="noopener noreferrer" class="hover:text-blue-500 transition-colors" onclick="event.stopPropagation()">
          <div class="flex  gap-2 text-sm">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
            </svg>
            <p class="uppercase">Open Mastodon</p>
          </div>
        </a>
      </div>
    </div>
  </div>
</div>
</a>