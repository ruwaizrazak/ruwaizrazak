---
import type { HTMLAttributes } from 'astro/types';

// Add variant prop
type Props = HTMLAttributes<'a'> & { variant?: 'primary' | 'secondary' };

const { href, class: className, variant = 'secondary', ...props } = Astro.props;
const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + (subpath?.[0] || '');
---

<a
  href={href}
  class:list={[
    className,
    { active: isActive },
    'group',
    variant === 'primary'
      ? 'bg-konpeki text-backgroundcolor hover:outline-dashed hover:outline-3 hover:outline-offset-8 hover:outline-konpeki border-2 border-konpeki font-sans'
      : 'text-konpeki hover:border-konpeki border-2 font-sans',
    'font-bold',
    'py-4',
    'text-xl',
    'px-8',
    'text-base',
    'rounded-none',
    'hover:rounded-xl',
    'transition-all',
    'duration-200',
    'ease-in-out',
    'uppercase',
    'relative',
    'inline-flex',
    'items-center',
    'gap-0'
  ]}
  {...props}
  type="button"
>
  {/* Arrow slides in from the left on hover */}
  <span
    class="absolute left-4 opacity-0 -translate-x-2 group-hover:opacity-100 group-hover:translate-x-0 transition-all duration-200 ease-in-out pointer-events-none select-none"
    aria-hidden="true"
  >â†’</span>
  <span class="group-hover:translate-x-5 transition-all">{/* Ensures text is centered even with arrow */}<slot /></span>
</a>

